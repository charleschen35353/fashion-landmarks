import torch
import torch.nn as nn
import torch.nn.functional as F

class FLD_f1(nn.Module):
    def __init__(self):
        super(FLD_f1, self).__init__()
        self.conv1_1 = nn.Conv2d(3, 64, 3, padding = (1,1) )
        self.conv1_2 = nn.Conv2d(64, 64, 3,  padding = (1,1))

        self.conv2_1 = nn.Conv2d(64, 128, 3,  padding = (1,1))
        self.conv2_2 = nn.Conv2d(128, 128, 3,  padding = (1,1))

        self.conv3_1 = nn.Conv2d(128, 256, 3,  padding = (1,1))
        self.conv3_2 = nn.Conv2d(256, 256, 3,  padding = (1,1))
        self.conv3_3 = nn.Conv2d(256, 256, 3,  padding = (1,1))

        self.conv4_1 = nn.Conv2d(256, 512, 3, padding = (1,1))
        self.conv4_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv4_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.conv5_1 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.fc6 = nn.Linear(7*7*512, 4096)
        self.fc7 = nn.Linear(4096, 4096)
        self.fc8_softlabel = nn.Linear(4096,20)
        self.fc8_landmarks = nn.Linear(4096,16)
        self.fc8_visibility_1 = nn.Linear(4096,3)
        self.fc8_visibility_2 = nn.Linear(4096,3)
        self.fc8_visibility_3 = nn.Linear(4096,3)
        self.fc8_visibility_4 = nn.Linear(4096,3)
        self.fc8_visibility_5 = nn.Linear(4096,3)
        self.fc8_visibility_6 = nn.Linear(4096,3)
        self.fc8_visibility_7 = nn.Linear(4096,3)
        self.fc8_visibility_8 = nn.Linear(4096,3)

        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(p = 0.5)

    def forward(self, x): # x in shape N * 224 * 224 * 3 
        conv1_1 = F.relu(self.conv1_1(x))
        conv1_2 = F.relu(self.conv1_2(conv1_1))
        pool1 = self.pool(conv1_2)
        conv2_1 = F.relu(self.conv2_1(pool1))
        conv2_2 = F.relu(self.conv2_2(conv2_1))
        pool2 = self.pool(conv2_2)
        conv3_1 = F.relu(self.conv3_1(pool2))
        conv3_2 = F.relu(self.conv3_2(conv3_1))
        conv3_3 = F.relu(self.conv3_3(conv3_2))
        pool3 = self.pool(conv3_3)
        conv4_1 = F.relu(self.conv4_1(pool3))
        conv4_2 = F.relu(self.conv4_2(conv4_1))
        conv4_3 = F.relu(self.conv4_3(conv4_2))
        pool4 = self.pool(conv4_3)
        conv5_1 = F.relu(self.conv5_1(pool4))
        conv5_2 = F.relu(self.conv5_2(conv5_1))
        conv5_3 = F.relu(self.conv5_3(conv5_2))
        pool5 = self.pool(conv5_3)
        pool5 = pool5.view(-1, 7*7*512)
        fc6 = self.dropout(F.relu(self.fc6(pool5)))
        fc7 = self.dropout(F.relu(self.fc7(fc6)))
        fc8_softlabel = F.softmax(self.fc8_softlabel(fc7))
        fc8_landmarks = self.fc8_landmarks(fc7)
        fc8_visibility_1 = self.fc8_visibility_1(fc7)
        fc8_visibility_2 = self.fc8_visibility_2(fc7)
        fc8_visibility_3 = self.fc8_visibility_3(fc7)
        fc8_visibility_4 = self.fc8_visibility_4(fc7)
        fc8_visibility_5 = self.fc8_visibility_5(fc7)
        fc8_visibility_6 = self.fc8_visibility_6(fc7)
        fc8_visibility_7 = self.fc8_visibility_7(fc7)
        fc8_visibility_8 = self.fc8_visibility_8(fc7)
        fc8 = torch.cat([fc8_landmarks, fc8_visibility_1, fc8_visibility_2, fc8_visibility_3, fc8_visibility_4, fc8_visibility_5, fc8_visibility_6, fc8_visibility_7, fc8_visibility_8 ], 1)

        return fc8

class FLD_f2(nn.Module):
    def __init__(self):
        super(FLD_f2, self).__init__()
        self.conv1_1 = nn.Conv2d(3, 64, 3, padding = (1,1) )
        self.conv1_2 = nn.Conv2d(64, 64, 3,  padding = (1,1))

        self.conv2_1 = nn.Conv2d(64, 128, 3,  padding = (1,1))
        self.conv2_2 = nn.Conv2d(128, 128, 3,  padding = (1,1))

        self.conv3_1 = nn.Conv2d(128, 256, 3,  padding = (1,1))
        self.conv3_2 = nn.Conv2d(256, 256, 3,  padding = (1,1))
        self.conv3_3 = nn.Conv2d(256, 256, 3,  padding = (1,1))

        self.conv4_1 = nn.Conv2d(256, 512, 3, padding = (1,1))
        self.conv4_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv4_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.conv5_1 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.fc6 = nn.Linear(7*7*512, 4096)
        self.fc_pre = nn.Linear(16, 512)
        self.fc7_pre = nn.Linear(4096+512, 4096)
        self.fc8_softlabel = nn.Linear(4096,10)
        self.fc8_landmarks = nn.Linear(4096,16)
        self.fc8_visibility_1 = nn.Linear(4096,3)
        self.fc8_visibility_2 = nn.Linear(4096,3)
        self.fc8_visibility_3 = nn.Linear(4096,3)
        self.fc8_visibility_4 = nn.Linear(4096,3)
        self.fc8_visibility_5 = nn.Linear(4096,3)
        self.fc8_visibility_6 = nn.Linear(4096,3)
        self.fc8_visibility_7 = nn.Linear(4096,3)
        self.fc8_visibility_8 = nn.Linear(4096,3)

        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(p = 0.5)

    def forward(self, x, lm_stage1): # x in shape N * 224 * 224 * 3 lm_stage in shape N*1*1*16
        conv1_1 = F.relu(self.conv1_1(x))
        conv1_2 = F.relu(self.conv1_2(conv1_1))
        pool1 = self.pool(conv1_2)
        conv2_1 = F.relu(self.conv2_1(pool1))
        conv2_2 = F.relu(self.conv2_2(conv2_1))
        pool2 = self.pool(conv2_2)
        conv3_1 = F.relu(self.conv3_1(pool2))
        conv3_2 = F.relu(self.conv3_2(conv3_1))
        conv3_3 = F.relu(self.conv3_3(conv3_2))
        pool3 = self.pool(conv3_3)
        conv4_1 = F.relu(self.conv4_1(pool3))
        conv4_2 = F.relu(self.conv4_2(conv4_1))
        conv4_3 = F.relu(self.conv4_3(conv4_2))
        pool4 = self.pool(conv4_3)
        conv5_1 = F.relu(self.conv5_1(pool4))
        conv5_2 = F.relu(self.conv5_2(conv5_1))
        conv5_3 = F.relu(self.conv5_3(conv5_2))
        pool5 = self.pool(conv5_3)
        pool5 = pool5.view(-1, 7*7*512)
        fc6 = self.dropout(F.relu(self.fc6(pool5)))
        prediction = lm_stage1.view(-1,16)
        fc_pre = self.fc_pre(prediction)
        fc6_pre = self.dropout(F.relu(torch.cat([fc6, fc_pre], 1)))
        fc7_pre = self.dropout(F.relu(self.fc7_pre(fc6_pre)))
        fc8_softlabel = self.fc8_softlabel(fc7_pre)
        fc8_landmarks = self.fc8_landmarks(fc7_pre)
        fc8_visibility_1 = self.fc8_visibility_1(fc7_pre)
        fc8_visibility_2 = self.fc8_visibility_2(fc7_pre)
        fc8_visibility_3 = self.fc8_visibility_3(fc7_pre)
        fc8_visibility_4 = self.fc8_visibility_4(fc7_pre)
        fc8_visibility_5 = self.fc8_visibility_5(fc7_pre)
        fc8_visibility_6 = self.fc8_visibility_6(fc7_pre)
        fc8_visibility_7 = self.fc8_visibility_7(fc7_pre)
        fc8_visibility_8 = self.fc8_visibility_8(fc7_pre)
        fc8 = torch.cat([fc8_landmarks, fc8_visibility_1, fc8_visibility_2, fc8_visibility_3, fc8_visibility_4, fc8_visibility_5, fc8_visibility_6, fc8_visibility_7, fc8_visibility_8 ], 1)

        return fc8

class FLD_f3(nn.Module):
    def __init__(self, num_softlabel):
        super(FLD_f3, self).__init__()
        self.conv1_1 = nn.Conv2d(3, 64, 3, padding = (1,1) )
        self.conv1_2 = nn.Conv2d(64, 64, 3,  padding = (1,1))

        self.conv2_1 = nn.Conv2d(64, 128, 3,  padding = (1,1))
        self.conv2_2 = nn.Conv2d(128, 128, 3,  padding = (1,1))

        self.conv3_1 = nn.Conv2d(128, 256, 3,  padding = (1,1))
        self.conv3_2 = nn.Conv2d(256, 256, 3,  padding = (1,1))
        self.conv3_3 = nn.Conv2d(256, 256, 3,  padding = (1,1))

        self.conv4_1 = nn.Conv2d(256, 512, 3, padding = (1,1))
        self.conv4_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv4_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.conv5_1 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.fc6 = nn.Linear(7*7*512, 4096)
        self.fc_pre = nn.Linear(16, 512)
        self.fc7_pre = nn.Linear(4096+512, 4096)
        self.fc8_softlabel_stage3 = nn.Linear(4096,num_softlabel)
        self.fc8_landmarks = nn.Linear(4096,16)
        self.fc8_visibility_1 = nn.Linear(4096,3)
        self.fc8_visibility_2 = nn.Linear(4096,3)
        self.fc8_visibility_3 = nn.Linear(4096,3)
        self.fc8_visibility_4 = nn.Linear(4096,3)
        self.fc8_visibility_5 = nn.Linear(4096,3)
        self.fc8_visibility_6 = nn.Linear(4096,3)
        self.fc8_visibility_7 = nn.Linear(4096,3)
        self.fc8_visibility_8 = nn.Linear(4096,3)

        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(p = 0.5)

    def forward(self, x, lm_stage1): # x in shape N * 224 * 224 * 3 lm_stage in shape N*1*1*16
        conv1_1 = F.relu(self.conv1_1(x))
        conv1_2 = F.relu(self.conv1_2(conv1_1))
        pool1 = self.pool(conv1_2)
        conv2_1 = F.relu(self.conv2_1(pool1))
        conv2_2 = F.relu(self.conv2_2(conv2_1))
        pool2 = self.pool(conv2_2)
        conv3_1 = F.relu(self.conv3_1(pool2))
        conv3_2 = F.relu(self.conv3_2(conv3_1))
        conv3_3 = F.relu(self.conv3_3(conv3_2))
        pool3 = self.pool(conv3_3)
        conv4_1 = F.relu(self.conv4_1(pool3))
        conv4_2 = F.relu(self.conv4_2(conv4_1))
        conv4_3 = F.relu(self.conv4_3(conv4_2))
        pool4 = self.pool(conv4_3)
        conv5_1 = F.relu(self.conv5_1(pool4))
        conv5_2 = F.relu(self.conv5_2(conv5_1))
        conv5_3 = F.relu(self.conv5_3(conv5_2))
        pool5 = self.pool(conv5_3)
        pool5 = pool5.view(-1, 7*7*512)
        fc6 = self.dropout(F.relu(self.fc6(pool5)))
        prediction = lm_stage1.view(-1,16)
        fc_pre = self.fc_pre(prediction)
        fc6_pre = self.dropout(F.relu(torch.cat([fc6, fc_pre], 1)))
        fc7_pre = self.dropout(F.relu(self.fc7_pre(fc6_pre)))
        fc8_softlabel_stage3 = self.fc8_softlabel_stage3(fc7_pre)
        fc8_landmarks = self.fc8_landmarks(fc7_pre)
        fc8_visibility_1 = self.fc8_visibility_1(fc7_pre)
        fc8_visibility_2 = self.fc8_visibility_2(fc7_pre)
        fc8_visibility_3 = self.fc8_visibility_3(fc7_pre)
        fc8_visibility_4 = self.fc8_visibility_4(fc7_pre)
        fc8_visibility_5 = self.fc8_visibility_5(fc7_pre)
        fc8_visibility_6 = self.fc8_visibility_6(fc7_pre)
        fc8_visibility_7 = self.fc8_visibility_7(fc7_pre)
        fc8_visibility_8 = self.fc8_visibility_8(fc7_pre)
        fc8 = torch.cat([fc8_landmarks, fc8_visibility_1, fc8_visibility_2, fc8_visibility_3, fc8_visibility_4, fc8_visibility_5, fc8_visibility_6, fc8_visibility_7, fc8_visibility_8 ], 1)
        return fc8

class FLD_u1(nn.Module):
    def __init__(self):
        super(FLD_u1, self).__init__()
        self.conv1_1 = nn.Conv2d(3, 64, 3, padding = (1,1) )
        self.conv1_2 = nn.Conv2d(64, 64, 3,  padding = (1,1))

        self.conv2_1 = nn.Conv2d(64, 128, 3,  padding = (1,1))
        self.conv2_2 = nn.Conv2d(128, 128, 3,  padding = (1,1))

        self.conv3_1 = nn.Conv2d(128, 256, 3,  padding = (1,1))
        self.conv3_2 = nn.Conv2d(256, 256, 3,  padding = (1,1))
        self.conv3_3 = nn.Conv2d(256, 256, 3,  padding = (1,1))

        self.conv4_1 = nn.Conv2d(256, 512, 3, padding = (1,1))
        self.conv4_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv4_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.conv5_1 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.fc6 = nn.Linear(7*7*512, 4096)
        self.fc7 = nn.Linear(4096, 4096)
        self.fc8_softlabel = nn.Linear(4096,20)
        self.fc8_landmarks = nn.Linear(4096,12)
        self.fc8_visibility_1 = nn.Linear(4096,3)
        self.fc8_visibility_2 = nn.Linear(4096,3)
        self.fc8_visibility_3 = nn.Linear(4096,3)
        self.fc8_visibility_4 = nn.Linear(4096,3)
        self.fc8_visibility_5 = nn.Linear(4096,3)
        self.fc8_visibility_6 = nn.Linear(4096,3)

        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(p = 0.5)

    def forward(self, x): # x in shape N * 224 * 224 * 3 
        conv1_1 = F.relu(self.conv1_1(x))
        conv1_2 = F.relu(self.conv1_2(conv1_1))
        pool1 = self.pool(conv1_2)
        conv2_1 = F.relu(self.conv2_1(pool1))
        conv2_2 = F.relu(self.conv2_2(conv2_1))
        pool2 = self.pool(conv2_2)
        conv3_1 = F.relu(self.conv3_1(pool2))
        conv3_2 = F.relu(self.conv3_2(conv3_1))
        conv3_3 = F.relu(self.conv3_3(conv3_2))
        pool3 = self.pool(conv3_3)
        conv4_1 = F.relu(self.conv4_1(pool3))
        conv4_2 = F.relu(self.conv4_2(conv4_1))
        conv4_3 = F.relu(self.conv4_3(conv4_2))
        pool4 = self.pool(conv4_3)
        conv5_1 = F.relu(self.conv5_1(pool4))
        conv5_2 = F.relu(self.conv5_2(conv5_1))
        conv5_3 = F.relu(self.conv5_3(conv5_2))
        pool5 = self.pool(conv5_3)
        pool5 = pool5.view(-1, 7*7*512)
        fc6 = self.dropout(F.relu(self.fc6(pool5)))
        fc7 = self.dropout(F.relu(self.fc7(fc6)))
        fc8_softlabel = F.softmax(self.fc8_softlabel(fc7))
        fc8_landmarks = self.fc8_landmarks(fc7)
        fc8_visibility_1 = self.fc8_visibility_1(fc7)
        fc8_visibility_2 = self.fc8_visibility_2(fc7)
        fc8_visibility_3 = self.fc8_visibility_3(fc7)
        fc8_visibility_4 = self.fc8_visibility_4(fc7)
        fc8_visibility_5 = self.fc8_visibility_5(fc7)
        fc8_visibility_6 = self.fc8_visibility_6(fc7)
        fc8 = torch.cat([fc8_landmarks, fc8_visibility_1, fc8_visibility_2, fc8_visibility_3, fc8_visibility_4,  fc8_visibility_5, fc8_visibility_6 ], 1)
        return fc8

class FLD_u2(nn.Module):
    def __init__(self):
        super(FLD_u2, self).__init__()
        self.conv1_1 = nn.Conv2d(3, 64, 3, padding = (1,1) )
        self.conv1_2 = nn.Conv2d(64, 64, 3,  padding = (1,1))

        self.conv2_1 = nn.Conv2d(64, 128, 3,  padding = (1,1))
        self.conv2_2 = nn.Conv2d(128, 128, 3,  padding = (1,1))

        self.conv3_1 = nn.Conv2d(128, 256, 3,  padding = (1,1))
        self.conv3_2 = nn.Conv2d(256, 256, 3,  padding = (1,1))
        self.conv3_3 = nn.Conv2d(256, 256, 3,  padding = (1,1))

        self.conv4_1 = nn.Conv2d(256, 512, 3, padding = (1,1))
        self.conv4_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv4_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.conv5_1 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.fc6 = nn.Linear(7*7*512, 4096)
        self.fc_pre = nn.Linear(12, 512)
        self.fc7_pre = nn.Linear(4096+512, 4096)
        self.fc8_hardlabel = nn.Linear(4096,20)
        self.fc8_landmarks = nn.Linear(4096,12)
        self.fc8_visibility_1 = nn.Linear(4096,3)
        self.fc8_visibility_2 = nn.Linear(4096,3)
        self.fc8_visibility_3 = nn.Linear(4096,3)
        self.fc8_visibility_4 = nn.Linear(4096,3)
        self.fc8_visibility_5 = nn.Linear(4096,3)
        self.fc8_visibility_6 = nn.Linear(4096,3)
        
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(p = 0.5)

    def forward(self, x, lm_stage1): # x in shape N * 224 * 224 * 3 lm_stage in shape N*1*1*16
        conv1_1 = F.relu(self.conv1_1(x))
        conv1_2 = F.relu(self.conv1_2(conv1_1))
        pool1 = self.pool(conv1_2)
        conv2_1 = F.relu(self.conv2_1(pool1))
        conv2_2 = F.relu(self.conv2_2(conv2_1))
        pool2 = self.pool(conv2_2)
        conv3_1 = F.relu(self.conv3_1(pool2))
        conv3_2 = F.relu(self.conv3_2(conv3_1))
        conv3_3 = F.relu(self.conv3_3(conv3_2))
        pool3 = self.pool(conv3_3)
        conv4_1 = F.relu(self.conv4_1(pool3))
        conv4_2 = F.relu(self.conv4_2(conv4_1))
        conv4_3 = F.relu(self.conv4_3(conv4_2))
        pool4 = self.pool(conv4_3)
        conv5_1 = F.relu(self.conv5_1(pool4))
        conv5_2 = F.relu(self.conv5_2(conv5_1))
        conv5_3 = F.relu(self.conv5_3(conv5_2))
        pool5 = self.pool(conv5_3)
        pool5 = pool5.view(-1, 7*7*512)
        fc6 = self.dropout(F.relu(self.fc6(pool5)))
        prediction = lm_stage1.view(-1,12)
        fc_pre = self.fc_pre(prediction)
        fc6_pre = self.dropout(F.relu(torch.cat([fc6, fc_pre], 1)))
        fc7_pre = self.dropout(F.relu(self.fc7_pre(fc6_pre)))
        fc8_hardlabel = self.fc8_hardlabel(fc7_pre)
        fc8_landmarks = self.fc8_landmarks(fc7_pre)
        fc8_visibility_1 = self.fc8_visibility_1(fc7_pre)
        fc8_visibility_2 = self.fc8_visibility_2(fc7_pre)
        fc8_visibility_3 = self.fc8_visibility_3(fc7_pre)
        fc8_visibility_4 = self.fc8_visibility_4(fc7_pre)
        fc8_visibility_5 = self.fc8_visibility_5(fc7_pre)
        fc8_visibility_6 = self.fc8_visibility_6(fc7_pre)
        fc8 = torch.cat([fc8_landmarks, fc8_visibility_1, fc8_visibility_2, fc8_visibility_3, fc8_visibility_4, fc8_visibility_5, fc8_visibility_6], 1)
        return fc8

class FLD_u3(nn.Module):
    def __init__(self, num_softlabel):
        super(FLD_u3, self).__init__()
        self.conv1_1 = nn.Conv2d(3, 64, 3, padding = (1,1) )
        self.conv1_2 = nn.Conv2d(64, 64, 3,  padding = (1,1))

        self.conv2_1 = nn.Conv2d(64, 128, 3,  padding = (1,1))
        self.conv2_2 = nn.Conv2d(128, 128, 3,  padding = (1,1))

        self.conv3_1 = nn.Conv2d(128, 256, 3,  padding = (1,1))
        self.conv3_2 = nn.Conv2d(256, 256, 3,  padding = (1,1))
        self.conv3_3 = nn.Conv2d(256, 256, 3,  padding = (1,1))

        self.conv4_1 = nn.Conv2d(256, 512, 3, padding = (1,1))
        self.conv4_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv4_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.conv5_1 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.fc6 = nn.Linear(7*7*512, 4096)
        self.fc_pre = nn.Linear(12, 512)
        self.fc7_pre = nn.Linear(4096+512, 4096)
        self.fc8_softlabel_stage3 = nn.Linear(4096,num_softlabel)
        self.fc8_landmarks = nn.Linear(4096,12)
        self.fc8_visibility_1 = nn.Linear(4096,3)
        self.fc8_visibility_2 = nn.Linear(4096,3)
        self.fc8_visibility_3 = nn.Linear(4096,3)
        self.fc8_visibility_4 = nn.Linear(4096,3)
        self.fc8_visibility_5 = nn.Linear(4096,3)
        self.fc8_visibility_6 = nn.Linear(4096,3)

        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(p = 0.5)

    def forward(self, x, lm_stage1): # x in shape N * 224 * 224 * 3 lm_stage in shape N*1*1*16
        conv1_1 = F.relu(self.conv1_1(x))
        conv1_2 = F.relu(self.conv1_2(conv1_1))
        pool1 = self.pool(conv1_2)
        conv2_1 = F.relu(self.conv2_1(pool1))
        conv2_2 = F.relu(self.conv2_2(conv2_1))
        pool2 = self.pool(conv2_2)
        conv3_1 = F.relu(self.conv3_1(pool2))
        conv3_2 = F.relu(self.conv3_2(conv3_1))
        conv3_3 = F.relu(self.conv3_3(conv3_2))
        pool3 = self.pool(conv3_3)
        conv4_1 = F.relu(self.conv4_1(pool3))
        conv4_2 = F.relu(self.conv4_2(conv4_1))
        conv4_3 = F.relu(self.conv4_3(conv4_2))
        pool4 = self.pool(conv4_3)
        conv5_1 = F.relu(self.conv5_1(pool4))
        conv5_2 = F.relu(self.conv5_2(conv5_1))
        conv5_3 = F.relu(self.conv5_3(conv5_2))
        pool5 = self.pool(conv5_3)
        pool5 = pool5.view(-1, 7*7*512)
        fc6 = self.dropout(F.relu(self.fc6(pool5)))
        prediction = lm_stage1.view(-1,12)
        fc_pre = self.fc_pre(prediction)
        fc6_pre = self.dropout(F.relu(torch.cat([fc6, fc_pre], 1)))
        fc7_pre = self.dropout(F.relu(self.fc7_pre(fc6_pre)))
        fc8_softlabel_stage3 = self.fc8_softlabel_stage3(fc7_pre)
        fc8_landmarks = self.fc8_landmarks(fc7_pre)
        fc8_visibility_1 = self.fc8_visibility_1(fc7_pre)
        fc8_visibility_2 = self.fc8_visibility_2(fc7_pre)
        fc8_visibility_3 = self.fc8_visibility_3(fc7_pre)
        fc8_visibility_4 = self.fc8_visibility_4(fc7_pre)
        fc8_visibility_5 = self.fc8_visibility_5(fc7_pre)
        fc8_visibility_6 = self.fc8_visibility_6(fc7_pre)
        fc8 = torch.cat([fc8_landmarks, fc8_visibility_1, fc8_visibility_2, fc8_visibility_3, fc8_visibility_4, fc8_visibility_5, fc8_visibility_6], 1)
        return fc8

class FLD_l1(nn.Module):
    def __init__(self):
        super(FLD_l1, self).__init__()
        self.conv1_1 = nn.Conv2d(3, 64, 3, padding = (1,1) )
        self.conv1_2 = nn.Conv2d(64, 64, 3,  padding = (1,1))

        self.conv2_1 = nn.Conv2d(64, 128, 3,  padding = (1,1))
        self.conv2_2 = nn.Conv2d(128, 128, 3,  padding = (1,1))

        self.conv3_1 = nn.Conv2d(128, 256, 3,  padding = (1,1))
        self.conv3_2 = nn.Conv2d(256, 256, 3,  padding = (1,1))
        self.conv3_3 = nn.Conv2d(256, 256, 3,  padding = (1,1))

        self.conv4_1 = nn.Conv2d(256, 512, 3, padding = (1,1))
        self.conv4_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv4_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.conv5_1 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.fc6 = nn.Linear(7*7*512, 4096)
        self.fc7 = nn.Linear(4096, 4096)
        self.fc8_softlabel = nn.Linear(4096,20)
        self.fc8_landmarks = nn.Linear(4096,8)
        self.fc8_visibility_1 = nn.Linear(4096,3)
        self.fc8_visibility_2 = nn.Linear(4096,3)
        self.fc8_visibility_3 = nn.Linear(4096,3)
        self.fc8_visibility_4 = nn.Linear(4096,3)


        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(p = 0.5)

    def forward(self, x): # x in shape N * 224 * 224 * 3 
        conv1_1 = F.relu(self.conv1_1(x))
        conv1_2 = F.relu(self.conv1_2(conv1_1))
        pool1 = self.pool(conv1_2)
        conv2_1 = F.relu(self.conv2_1(pool1))
        conv2_2 = F.relu(self.conv2_2(conv2_1))
        pool2 = self.pool(conv2_2)
        conv3_1 = F.relu(self.conv3_1(pool2))
        conv3_2 = F.relu(self.conv3_2(conv3_1))
        conv3_3 = F.relu(self.conv3_3(conv3_2))
        pool3 = self.pool(conv3_3)
        conv4_1 = F.relu(self.conv4_1(pool3))
        conv4_2 = F.relu(self.conv4_2(conv4_1))
        conv4_3 = F.relu(self.conv4_3(conv4_2))
        pool4 = self.pool(conv4_3)
        conv5_1 = F.relu(self.conv5_1(pool4))
        conv5_2 = F.relu(self.conv5_2(conv5_1))
        conv5_3 = F.relu(self.conv5_3(conv5_2))
        pool5 = self.pool(conv5_3)
        pool5 = pool5.view(-1, 7*7*512)
        fc6 = self.dropout(F.relu(self.fc6(pool5)))
        fc7 = self.dropout(F.relu(self.fc7(fc6)))
        fc8_softlabel = F.softmax(self.fc8_softlabel(fc7))
        fc8_landmarks = self.fc8_landmarks(fc7)
        fc8_visibility_1 = self.fc8_visibility_1(fc7)
        fc8_visibility_2 = self.fc8_visibility_2(fc7)
        fc8_visibility_3 = self.fc8_visibility_3(fc7)
        fc8_visibility_4 = self.fc8_visibility_4(fc7)

        fc8 = torch.cat([fc8_landmarks, fc8_visibility_1, fc8_visibility_2, fc8_visibility_3, fc8_visibility_4 ], 1)
        return fc8

class FLD_l2(nn.Module):
    def __init__(self):
        super(FLD_l2, self).__init__()
        self.conv1_1 = nn.Conv2d(3, 64, 3, padding = (1,1) )
        self.conv1_2 = nn.Conv2d(64, 64, 3,  padding = (1,1))

        self.conv2_1 = nn.Conv2d(64, 128, 3,  padding = (1,1))
        self.conv2_2 = nn.Conv2d(128, 128, 3,  padding = (1,1))

        self.conv3_1 = nn.Conv2d(128, 256, 3,  padding = (1,1))
        self.conv3_2 = nn.Conv2d(256, 256, 3,  padding = (1,1))
        self.conv3_3 = nn.Conv2d(256, 256, 3,  padding = (1,1))

        self.conv4_1 = nn.Conv2d(256, 512, 3, padding = (1,1))
        self.conv4_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv4_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.conv5_1 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.fc6 = nn.Linear(7*7*512, 4096)
        self.fc_pre = nn.Linear(8, 512)
        self.fc7_pre = nn.Linear(4096+512, 4096)
        self.fc8_softlabel = nn.Linear(4096,10)
        self.fc8_landmarks = nn.Linear(4096,8)
        self.fc8_visibility_1 = nn.Linear(4096,3)
        self.fc8_visibility_2 = nn.Linear(4096,3)
        self.fc8_visibility_3 = nn.Linear(4096,3)
        self.fc8_visibility_4 = nn.Linear(4096,3)

        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(p = 0.5)

    def forward(self, x, lm_stage1): # x in shape N * 224 * 224 * 3 lm_stage in shape N*1*1*16
        conv1_1 = F.relu(self.conv1_1(x))
        conv1_2 = F.relu(self.conv1_2(conv1_1))
        pool1 = self.pool(conv1_2)
        conv2_1 = F.relu(self.conv2_1(pool1))
        conv2_2 = F.relu(self.conv2_2(conv2_1))
        pool2 = self.pool(conv2_2)
        conv3_1 = F.relu(self.conv3_1(pool2))
        conv3_2 = F.relu(self.conv3_2(conv3_1))
        conv3_3 = F.relu(self.conv3_3(conv3_2))
        pool3 = self.pool(conv3_3)
        conv4_1 = F.relu(self.conv4_1(pool3))
        conv4_2 = F.relu(self.conv4_2(conv4_1))
        conv4_3 = F.relu(self.conv4_3(conv4_2))
        pool4 = self.pool(conv4_3)
        conv5_1 = F.relu(self.conv5_1(pool4))
        conv5_2 = F.relu(self.conv5_2(conv5_1))
        conv5_3 = F.relu(self.conv5_3(conv5_2))
        pool5 = self.pool(conv5_3)
        pool5 = pool5.view(-1, 7*7*512)
        fc6 = self.dropout(F.relu(self.fc6(pool5)))
        prediction = lm_stage1.view(-1,8)
        fc_pre = self.fc_pre(prediction)
        fc6_pre = self.dropout(F.relu(torch.cat([fc6, fc_pre], 1)))
        fc7_pre = self.dropout(F.relu(self.fc7_pre(fc6_pre)))
        fc8_softlabel = self.fc8_softlabel(fc7_pre)
        fc8_landmarks = self.fc8_landmarks(fc7_pre)
        fc8_visibility_1 = self.fc8_visibility_1(fc7_pre)
        fc8_visibility_2 = self.fc8_visibility_2(fc7_pre)
        fc8_visibility_3 = self.fc8_visibility_3(fc7_pre)
        fc8_visibility_4 = self.fc8_visibility_4(fc7_pre)

        fc8 = torch.cat([fc8_landmarks, fc8_visibility_1, fc8_visibility_2, fc8_visibility_3, fc8_visibility_4], 1)
        
        return fc8

class FLD_l3(nn.Module):
    def __init__(self, num_softlabel):
        super(FLD_l3, self).__init__()
        self.conv1_1 = nn.Conv2d(3, 64, 3, padding = (1,1) )
        self.conv1_2 = nn.Conv2d(64, 64, 3,  padding = (1,1))

        self.conv2_1 = nn.Conv2d(64, 128, 3,  padding = (1,1))
        self.conv2_2 = nn.Conv2d(128, 128, 3,  padding = (1,1))

        self.conv3_1 = nn.Conv2d(128, 256, 3,  padding = (1,1))
        self.conv3_2 = nn.Conv2d(256, 256, 3,  padding = (1,1))
        self.conv3_3 = nn.Conv2d(256, 256, 3,  padding = (1,1))

        self.conv4_1 = nn.Conv2d(256, 512, 3, padding = (1,1))
        self.conv4_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv4_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.conv5_1 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_2 = nn.Conv2d(512, 512, 3,  padding = (1,1))
        self.conv5_3 = nn.Conv2d(512, 512, 3,  padding = (1,1))

        self.fc6 = nn.Linear(7*7*512, 4096)
        self.fc_pre = nn.Linear(8, 512)
        self.fc7_pre = nn.Linear(4096+512, 4096)
        self.fc8_softlabel_stage3 = nn.Linear(4096,num_softlabel)
        self.fc8_landmarks = nn.Linear(4096,8)
        self.fc8_visibility_1 = nn.Linear(4096,3)
        self.fc8_visibility_2 = nn.Linear(4096,3)
        self.fc8_visibility_3 = nn.Linear(4096,3)
        self.fc8_visibility_4 = nn.Linear(4096,3)
       

        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(p = 0.5)

    def forward(self, x, lm_stage1): # x in shape N * 224 * 224 * 3 lm_stage in shape N*1*1*16
        conv1_1 = F.relu(self.conv1_1(x))
        conv1_2 = F.relu(self.conv1_2(conv1_1))
        pool1 = self.pool(conv1_2)
        conv2_1 = F.relu(self.conv2_1(pool1))
        conv2_2 = F.relu(self.conv2_2(conv2_1))
        pool2 = self.pool(conv2_2)
        conv3_1 = F.relu(self.conv3_1(pool2))
        conv3_2 = F.relu(self.conv3_2(conv3_1))
        conv3_3 = F.relu(self.conv3_3(conv3_2))
        pool3 = self.pool(conv3_3)
        conv4_1 = F.relu(self.conv4_1(pool3))
        conv4_2 = F.relu(self.conv4_2(conv4_1))
        conv4_3 = F.relu(self.conv4_3(conv4_2))
        pool4 = self.pool(conv4_3)
        conv5_1 = F.relu(self.conv5_1(pool4))
        conv5_2 = F.relu(self.conv5_2(conv5_1))
        conv5_3 = F.relu(self.conv5_3(conv5_2))
        pool5 = self.pool(conv5_3)
        pool5 = pool5.view(-1, 7*7*512)
        fc6 = self.dropout(F.relu(self.fc6(pool5)))
        prediction = lm_stage1.view(-1,8)
        fc_pre = self.fc_pre(prediction)
        fc6_pre = self.dropout(F.relu(torch.cat([fc6, fc_pre], 1)))
        fc7_pre = self.dropout(F.relu(self.fc7_pre(fc6_pre)))
        fc8_softlabel_stage3 = self.fc8_softlabel_stage3(fc7_pre)
        fc8_landmarks = self.fc8_landmarks(fc7_pre)
        fc8_visibility_1 = self.fc8_visibility_1(fc7_pre)
        fc8_visibility_2 = self.fc8_visibility_2(fc7_pre)
        fc8_visibility_3 = self.fc8_visibility_3(fc7_pre)
        fc8_visibility_4 = self.fc8_visibility_4(fc7_pre)

        fc8 = torch.cat([fc8_landmarks, fc8_visibility_1, fc8_visibility_2, fc8_visibility_3, fc8_visibility_4], 1)
        return fc8
